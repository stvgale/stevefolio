"use strict";
var introCanvas = document.querySelector("#js-canvas-title"),
    ReduceMotionMode = "(prefers-reduced-motion:reduce)",
    isReduceMotion = window.matchMedia(ReduceMotionMode).matches,
    createIntro = function() {
        var e = 1e4,
            a = new THREE.Scene,
            r = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, .1, e),
            s = new THREE.WebGLRenderer({
                alpha: !0,
                antialias: !0
            });
        s.setClearColor("#000000", 0), s.setSize(window.innerWidth, window.innerHeight), introCanvas.appendChild(s.domElement);

        function t(e, t) {
            this.mesh = new THREE.Mesh(e, n), this.dist = t, this.distDouble = 2 * this.dist, this.tau = 2 * Math.PI
        }
        var d = new THREE.Group,
            n = new THREE.MeshBasicMaterial( { color: 0xFD9EAF } ),
            normal = new THREE.MeshBasicMaterial( { color: 0x000000 } ),
            normal2 = new THREE.MeshNormalMaterial( );
        
        
        
        t.prototype.create = function() {
            this.mesh.position.x = Math.random() * this.distDouble - this.dist, this.mesh.position.y = Math.random() * this.distDouble - this.dist, this.mesh.position.z = Math.random() * this.distDouble - this.dist, this.mesh.rotation.x = Math.random() * this.tau, this.mesh.rotation.y = Math.random() * this.tau, this.mesh.rotation.z = Math.random() * this.tau, this.mesh.matrixAutoUpdate = !1, this.mesh.updateMatrix(), d.add(this.mesh)
        };
        for (var i = Math.ceil(24), o = Math.ceil(15), h = Math.ceil(60), c = new THREE.TetrahedronGeometry(60, 0), u = 0; u < 60; u++) {
            new t(c, Math.ceil(2e3)).create()
        }
        for (var l = new THREE.BoxBufferGeometry(80, 80, 80), m = 0; m < 60; m++) {
            new t(l, Math.ceil(e / 3)).create()
        }
        a.add(d);
        
        
        var w = new THREE.FontLoader,
            M = new THREE.Mesh;
            w.load("https://stvgale.github.io/90c245ad32624327d3fc089a4688f1a114bf18c6/js/typeface.json", function(e) {
            var t = {
                    font: e,
                    size: Math.ceil(162),
                    height: 1,
                    curveSegments: 12,
                    bevelEnabled: !0,
                    bevelThickness: 1,
                    bevelSize:  1,
                    bevelOffset: 1,
                    bevelSegments: 1
                },
                i = new THREE.TextGeometry("Always Having\n  a Good time.", t);

            M.geometry = i, M.material = normal, M.geometry.computeBoundingBox(), M.geometry.boundingBox.getCenter(M.position).multiplyScalar(-1), a.add(M)
        });
        var v = 0,
            E = 0,
            f = {
                windowHalfX: window.innerWidth / 2,
                windowHalfY: window.innerHeight / 2,
                coordinates: function(e, t) {
                    v = 2 * (e - f.windowHalfX), E = 10 * (t - f.windowHalfY)
                },
                onMouseMove: function(e) {
                    f.coordinates(e.clientX, e.clientY)
                },
                onTouchMove: function(e) {
                    f.coordinates(e.changedTouches[0].clientX, e.changedTouches[0].clientY)
                }
            };

        function p() {
            if (function(e) {
                    var t = e.domElement,
                        i = window.devicePixelRatio,
                        n = t.clientWidth * i | 0,
                        o = t.clientHeight * i | 0,
                        a = t.width !== n || t.height !== o;
                    return a && e.setSize(n, o, !1), a
                }(s)) {
                var e = s.domElement;
                r.aspect = e.clientWidth / e.clientHeight, r.updateProjectionMatrix()
            }
        }
        if (document.addEventListener("mousemove", f.onMouseMove), document.addEventListener("touchmove", f.onTouchMove), window.addEventListener("resize", function() {
                r.aspect = window.innerWidth / window.innerHeight, r.updateProjectionMatrix(), s.setSize(window.innerWidth, window.innerHeight)
            }), isReduceMotion) return r.position.set(.1, 0, 800), void
        function e() {
            p(), s.render(a, r), requestAnimationFrame(e)
        }();
        r.position.set(-2e4, 0, 1200),
            function e() {
                p(), r.position.x += .05 * (v - r.position.x), r.position.y += .05 * (-.1 * E - r.position.y), r.lookAt(a.position);
                var t = .001 * Date.now(),
                    i = 0,
                    n = 0,
                    o = .5 * Math.sin(.09 * t);
                d.rotation.x = i, d.rotation.y = n, d.rotation.z = o, M.rotation.x = i, M.rotation.y = n, M.rotation.z = i, s.render(a, r), requestAnimationFrame(e)
            }()
    };
introCanvas && createIntro();